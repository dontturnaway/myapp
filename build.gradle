plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929' //added sonar
}

group = 'com.test'
version = '1.0'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator' //metrics
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.projectlombok:lombok:1.18.26'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.11.0' //metrics
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	//Lombok
	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
	testCompileOnly  'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor  'org.projectlombok:lombok:1.18.26'
	//Testcontainers
	implementation platform('org.testcontainers:testcontainers-bom:1.18.3')
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
}

/* Don't generate thin jar */
tasks.jar {
	enabled = false
}

/* rename output binary file to */
tasks.bootJar {
	archiveFileName = 'myapp.jar'
}

/* sonar link*/
sonar {
	properties {
		property('sonar.projectKey', 'myapp')
		property('sonar.host.url', 'http://localhost:9000/')
		property('sonar.token', 'sqa_63d5a66048b7675e90bdd090466787cb2c8a218f')
	}
}

/* obligatory for Sonar to catch Jacoco's test report */
jacocoTestReport {
	reports {
		xml.required = true
	}
	dependsOn test
}

/* embed Jacoco report generation in Sonar task */
tasks.named('sonar').configure {
	dependsOn jacocoTestReport
}